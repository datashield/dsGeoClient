% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/ds.over.R
\name{ds.over}
\alias{ds.over}
\title{Wrapper for \code{over()} function from sp and rgeos packages}
\usage{
ds.over(x = NULL, y = NULL, fn = NULL, returnList = FALSE,
  newobj = NULL, datasources = NULL)
}
\arguments{
\item{x}{geometry (locations) of the queries (spatial object)}

\item{y}{layer from which the geometries or attributes are queried (spatial object)}

\item{fn}{for certain geometry combinations (e.g. points and polygon data frames)
apply a function to the attributes to the locations (x). See  \code{over()} function from sp!}

\item{returnList}{if FALSE, a data.frame with number of rows equal to
length(x) is returned, if it is TRUE a list with length(x) elements is returned,
with a list element the data.frame elements of all geometries in y that correspond to that
element of x}

\item{newobj}{a character, the name of the new object which will be created
If no name is specified the default name is the name of the original data frame
followed by the suffix '.over'.}

\item{datasources}{a list of opal object(s) obtained after login in to opal servers;
these objects hold also the data assign to R, as \code{dataframe}, from opal datasources.}
}
\value{
either an object of class SpatialPointsDataFrame or SpatialPoints,
depending on the class of x
}
\description{
This function is a wrapper for the \code{over()} function from the
sp and rgeos packages. Consistent spatial overlay for points, grids and polygons:
at the spatial locations of object x retrieves the indexes or attributes from spatial
object y
}
\details{


See the \code{over()} function from sp package for more details
}
\examples{
{



# Load log in data

data(GEOSPATIAL_logindata)

# login
# (by default the assigned dataset is a dataframe named 'D')
opals <- datashield.login(logins=GEOSPATIAL_logindata,assign=TRUE)

# Convert data frame D to a SpatialPointsDataFrame
# Data frame D has columns Lon and Lat which contain the coordinates

myvect <- c("Lon","Lat")
ds.coordinates('D',myvect, newobj='coords')

# Assign epsg coordinate system to a SpatialPointsDataFrame called mySPframe
# The coordinate system 4326 is the code for WGS84 (GPS)

ds.proj4string('coords',4326,'mySPframe')

# Transform epsg coordinate system for a SpatialPointsDataFrame called mySPframe
# The coordinate system 29902 is the code for Ireland

ds.spTransform('mySPframe',29902,'transformed')

# Transform groups of points in a SpatialPointsDataFrame called transformed into lines
# The points in the data frame are grouped by an idenifier in a column called id

ds.coordsToLines('transformed','person_id',newobj='my_lines')

# Set a buffer of 150 around points contained in the bus_work object
# Buffer is created per id in the bus_work object

ds.gBuffer('my_lines',by_id=,ip_width=150,'my_buffer')

#Now need to assign another table containing some locations to use the over function

datashield.assign(opals, symbol='locations', value='GEOSPATIAL.GPS_location')

#assign the correct projection to the buffer object
ds.proj4string('my_buffer', 29902, 'my_buffer')

#Convert the standard data frame to points, set the projection and transform
#for the locations

ds.coordinates('locations',c('Lon','Lat'), newobj='locations')

ds.proj4string('locations', 4326, 'locations')
ds.spTransform('locations', 29902, 'locations')

#Overlay the buffered regions and locations returning a count of matches
#where the locations fall inside the buffer
ds.over('my_buffer','locations',fn='length',returnList=F,'res')

}
}
\author{
Bishop, T.
}

